{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Expressive Regex \u00b6 This project was made with inspiration from Super Expressive for JavaScript . Expressive Regex allow you to build regular expressions in almost natural language and without external dependency. Example to match a telephone number that can be in the format 555-555-555, 555 555 555 or 555555555. ExpressiveRegex () \\ . exactly ( 2 ) . group \\ . oneOrMore . digit \\ . optional . setOfLiterals \\ . char ( '-' ) \\ . whitespaceChar \\ . end () \\ . end () \\ . oneOrMore . digit \\ . toRegexString () \"(?:\\d+[\\-\\s]?) {2} \\d+\"","title":"Home"},{"location":"#expressive-regex","text":"This project was made with inspiration from Super Expressive for JavaScript . Expressive Regex allow you to build regular expressions in almost natural language and without external dependency. Example to match a telephone number that can be in the format 555-555-555, 555 555 555 or 555555555. ExpressiveRegex () \\ . exactly ( 2 ) . group \\ . oneOrMore . digit \\ . optional . setOfLiterals \\ . char ( '-' ) \\ . whitespaceChar \\ . end () \\ . end () \\ . oneOrMore . digit \\ . toRegexString () \"(?:\\d+[\\-\\s]?) {2} \\d+\"","title":"Expressive Regex"},{"location":"api/boundary_matchers/","text":"Boundary Matchers \u00b6 Sometimes, when it is required to match a whole line, we may also need to match at the beginning of a line or even at the end. This can be done thanks to the boundary matchers. Pending implement and examples","title":"Boundary Matchers"},{"location":"api/boundary_matchers/#boundary-matchers","text":"Sometimes, when it is required to match a whole line, we may also need to match at the beginning of a line or even at the end. This can be done thanks to the boundary matchers. Pending implement and examples","title":"Boundary Matchers"},{"location":"api/grouping/","text":"Grouping \u00b6 .group \u00b6 Creates a non-capturing group of the proceeding elements. Needs to be finalised with .end() . Example ExpressiveRegex () \\ . group \\ . range ( 'a' , 'f' ) \\ . range ( '0' , '9' ) \\ . string ( 'XXX' ) \\ . end () \\ . toRegexString () ([ a - f ][ 0 - 9 ] XXX ) .capture \u00b6 Creates a capture group for the proceeding elements. Needs to be finalised with .end() . Example ExpressiveRegex () \\ . capture \\ . range ( 'a' , 'f' ) \\ . range ( '0' , '9' ) \\ . string ( 'XXX' ) \\ . end () \\ . toRegexString () ([ a - f ][ 0 - 9 ] XXX ) .setOfLiterals \u00b6 Creates a set from the proceeding elements. Needs to be finalised with .end() . Inside this statement only is allowed Literals except anyChar , .rawChar , .string , .rawString , .anythingButRange , .anythingButChars Example ExpressiveRegex () \\ . setOfLiterals \\ . char ( '-' ) \\ . range ( 1 , 4 ) \\ . anyOfChars ( 'dfs' ) \\ . end () \\ . toRegexString () \"[\\-1-4dfs]\" .end() \u00b6 Signifies the end of a ExpressiveRegex grouping. Example ExpressiveRegex () . capture \\ . setOfLiterals \\ . char ( '-' ) \\ . range ( 1 , 4 ) \\ . anyOfChars ( 'dfs' ) \\ . end () \\ . range ( '0' , '9' ) \\ . string ( 'XXX' ) \\ . end () \\ . toRegexString () ([ \\ - 1 - 4 dfs ][ 0 - 9 ] XXX )","title":"Grouping"},{"location":"api/grouping/#grouping","text":"","title":"Grouping"},{"location":"api/grouping/#group","text":"Creates a non-capturing group of the proceeding elements. Needs to be finalised with .end() . Example ExpressiveRegex () \\ . group \\ . range ( 'a' , 'f' ) \\ . range ( '0' , '9' ) \\ . string ( 'XXX' ) \\ . end () \\ . toRegexString () ([ a - f ][ 0 - 9 ] XXX )","title":".group"},{"location":"api/grouping/#capture","text":"Creates a capture group for the proceeding elements. Needs to be finalised with .end() . Example ExpressiveRegex () \\ . capture \\ . range ( 'a' , 'f' ) \\ . range ( '0' , '9' ) \\ . string ( 'XXX' ) \\ . end () \\ . toRegexString () ([ a - f ][ 0 - 9 ] XXX )","title":".capture"},{"location":"api/grouping/#setofliterals","text":"Creates a set from the proceeding elements. Needs to be finalised with .end() . Inside this statement only is allowed Literals except anyChar , .rawChar , .string , .rawString , .anythingButRange , .anythingButChars Example ExpressiveRegex () \\ . setOfLiterals \\ . char ( '-' ) \\ . range ( 1 , 4 ) \\ . anyOfChars ( 'dfs' ) \\ . end () \\ . toRegexString () \"[\\-1-4dfs]\"","title":".setOfLiterals"},{"location":"api/grouping/#end","text":"Signifies the end of a ExpressiveRegex grouping. Example ExpressiveRegex () . capture \\ . setOfLiterals \\ . char ( '-' ) \\ . range ( 1 , 4 ) \\ . anyOfChars ( 'dfs' ) \\ . end () \\ . range ( '0' , '9' ) \\ . string ( 'XXX' ) \\ . end () \\ . toRegexString () ([ \\ - 1 - 4 dfs ][ 0 - 9 ] XXX )","title":".end()"},{"location":"api/literals/","text":"Literals \u00b6 Literals are the simplest form of pattern matching in regular expressions. They will simply succeed whenever that literal is found. .anyChar \u00b6 Matches any character except a newline. Example ExpressiveRegex () \\ . anyChar \\ . toRegexString () \".\" .whitespaceChar \u00b6 Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] . In Unicode it will match the whole range of Unicode whitespace characters. Example ExpressiveRegex () \\ . whitespaceChar \\ . toRegexString () \"\\s\" .nonWhitespaceChar \u00b6 Matches any non-whitespace character; equivalent to [^\\s] . Example ExpressiveRegex () \\ . nonWhitespaceChar \\ . toRegexString () \"\\S\" .digit \u00b6 Matches any non-whitespace character; equivalent to [0-9] . In Unicode it will match the whole range of Unicode digits. Example ExpressiveRegex () \\ . digit \\ . toRegexString () \"\\d\" .nonDigit \u00b6 Matches any non-digit character; equivalent to [^\\d] . Example ExpressiveRegex () \\ . nonDigit \\ . toRegexString () \"\\D\" .word \u00b6 Matches any alpha-numeric ( a-z, A-Z, 0-9 ) characters, as well as _ . In Unicode it will match the range of Unicode alphanumeric characters (letters plus digits plus underscore). Example ExpressiveRegex () \\ . word \\ . toRegexString () \"\\w\" .nonWord \u00b6 Matches any non alpha-numeric ( a-z, A-Z, 0-9 ) characters, excluding _ as well. Example ExpressiveRegex () \\ . nonWord \\ . toRegexString () \"\\W\" .newline \u00b6 Matches a \\n character. Example ExpressiveRegex () \\ . newline \\ . toRegexString () \" \\n \" .carriageReturn \u00b6 Matches a \\r character. Example ExpressiveRegex () \\ . carriageReturn \\ . toRegexString () \" \\r \" .tab \u00b6 Matches a \\t character. Example ExpressiveRegex () \\ . tab \\ . toRegexString () \" \\t \" .space \u00b6 Matches a character. Example ExpressiveRegex () \\ . space \\ . toRegexString () \" \" .char(c) \u00b6 Matches the exact char c but scape special characters ('\\', '.', '^', '$', '|', '?', '*', '+', '(', ')', '[', ']', '{', '}', '-') . Examples ExpressiveRegex () \\ . char ( 'a' ) \\ . toRegexString () \"a\" ExpressiveRegex () \\ . char ( '$' ) \\ . toRegexString () \"\\$\" .rawChar(c) \u00b6 Matches the exact char c and don't scape special characters. Examples ExpressiveRegex () \\ . rawChar ( 'a' ) \\ . toRegexString () \"a\" ExpressiveRegex () \\ . rawChar ( '$' ) \\ . toRegexString () \"$\" .string(s) \u00b6 Matches the exact string s but scape special characters ('\\', '.', '^', '$', '|', '?', '*', '+', '(', ')', '[', ']', '{', '}', '-') . Example ExpressiveRegex () \\ . string ( '2$' ) \\ . toRegexString () \"2\\$\" .rawString(s) \u00b6 Matches the exact string s and don't scape special characters. Example ExpressiveRegex () \\ . string ( '2$' ) \\ . toRegexString () \"2$\" .range(a, b, exclude) \u00b6 Matches any character that falls between a and b and don't mathch character in the exclude set. a and b must be same type, a <= b and: if \"a\" <= a <= \"z\" then \"a\" <= b <= \"z\" if \"A\" <= a <= \"Z\" then \"A\" <= b <= \"A\" if \"0\" <= a <= \"9\" then \"0\" <= b <= \"9\" if 0 <= a <= 9 then 0 <= b <= 9 exclude must be an string or list or tuple of single char string. By default exclude is None Examples ExpressiveRegex () \\ . range ( 'a' , 'f' ) \\ . toRegexString () \"[a-f]\" ExpressiveRegex () \\ . range ( 'a' , 'f' , exclude = 'bd' ) \\ . toRegexString () \"[acef]\" ExpressiveRegex () \\ . range ( 'a' , 'f' , exclude = [ 'b' , 'd' ]) \\ . toRegexString () \"[acef]\" .anythingButRange(a, b, exclude) \u00b6 Matches any character, except those that would be captured by the .range . Examples ExpressiveRegex () \\ . anythingButRange ( 'a' , 'f' ) \\ . toRegexString () \"[^a-f]\" ExpressiveRegex () \\ . anythingButRange ( 'a' , 'f' , exclude = 'bd' ) \\ . toRegexString () \"[^acef]\" .anyOfChars(chars) \u00b6 Matches any of the characters in the provided string chars and scape special characters. Example ExpressiveRegex () \\ . anyOfChars ( 'abd$' ) \\ . toRegexString () \"[abd\\$]\" .anythingButChars(chars) \u00b6 Matches any character, except any of those in the provided string chars and scape special characters. Example ExpressiveRegex () \\ . anythingButChars ( 'abd$' ) \\ . toRegexString () \"[^abd\\$]\"","title":"Literals"},{"location":"api/literals/#literals","text":"Literals are the simplest form of pattern matching in regular expressions. They will simply succeed whenever that literal is found.","title":"Literals"},{"location":"api/literals/#anychar","text":"Matches any character except a newline. Example ExpressiveRegex () \\ . anyChar \\ . toRegexString () \".\"","title":".anyChar"},{"location":"api/literals/#whitespacechar","text":"Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] . In Unicode it will match the whole range of Unicode whitespace characters. Example ExpressiveRegex () \\ . whitespaceChar \\ . toRegexString () \"\\s\"","title":".whitespaceChar"},{"location":"api/literals/#nonwhitespacechar","text":"Matches any non-whitespace character; equivalent to [^\\s] . Example ExpressiveRegex () \\ . nonWhitespaceChar \\ . toRegexString () \"\\S\"","title":".nonWhitespaceChar"},{"location":"api/literals/#digit","text":"Matches any non-whitespace character; equivalent to [0-9] . In Unicode it will match the whole range of Unicode digits. Example ExpressiveRegex () \\ . digit \\ . toRegexString () \"\\d\"","title":".digit"},{"location":"api/literals/#nondigit","text":"Matches any non-digit character; equivalent to [^\\d] . Example ExpressiveRegex () \\ . nonDigit \\ . toRegexString () \"\\D\"","title":".nonDigit"},{"location":"api/literals/#word","text":"Matches any alpha-numeric ( a-z, A-Z, 0-9 ) characters, as well as _ . In Unicode it will match the range of Unicode alphanumeric characters (letters plus digits plus underscore). Example ExpressiveRegex () \\ . word \\ . toRegexString () \"\\w\"","title":".word"},{"location":"api/literals/#nonword","text":"Matches any non alpha-numeric ( a-z, A-Z, 0-9 ) characters, excluding _ as well. Example ExpressiveRegex () \\ . nonWord \\ . toRegexString () \"\\W\"","title":".nonWord"},{"location":"api/literals/#newline","text":"Matches a \\n character. Example ExpressiveRegex () \\ . newline \\ . toRegexString () \" \\n \"","title":".newline"},{"location":"api/literals/#carriagereturn","text":"Matches a \\r character. Example ExpressiveRegex () \\ . carriageReturn \\ . toRegexString () \" \\r \"","title":".carriageReturn"},{"location":"api/literals/#tab","text":"Matches a \\t character. Example ExpressiveRegex () \\ . tab \\ . toRegexString () \" \\t \"","title":".tab"},{"location":"api/literals/#space","text":"Matches a character. Example ExpressiveRegex () \\ . space \\ . toRegexString () \" \"","title":".space"},{"location":"api/literals/#charc","text":"Matches the exact char c but scape special characters ('\\', '.', '^', '$', '|', '?', '*', '+', '(', ')', '[', ']', '{', '}', '-') . Examples ExpressiveRegex () \\ . char ( 'a' ) \\ . toRegexString () \"a\" ExpressiveRegex () \\ . char ( '$' ) \\ . toRegexString () \"\\$\"","title":".char(c)"},{"location":"api/literals/#rawcharc","text":"Matches the exact char c and don't scape special characters. Examples ExpressiveRegex () \\ . rawChar ( 'a' ) \\ . toRegexString () \"a\" ExpressiveRegex () \\ . rawChar ( '$' ) \\ . toRegexString () \"$\"","title":".rawChar(c)"},{"location":"api/literals/#strings","text":"Matches the exact string s but scape special characters ('\\', '.', '^', '$', '|', '?', '*', '+', '(', ')', '[', ']', '{', '}', '-') . Example ExpressiveRegex () \\ . string ( '2$' ) \\ . toRegexString () \"2\\$\"","title":".string(s)"},{"location":"api/literals/#rawstrings","text":"Matches the exact string s and don't scape special characters. Example ExpressiveRegex () \\ . string ( '2$' ) \\ . toRegexString () \"2$\"","title":".rawString(s)"},{"location":"api/literals/#rangea-b-exclude","text":"Matches any character that falls between a and b and don't mathch character in the exclude set. a and b must be same type, a <= b and: if \"a\" <= a <= \"z\" then \"a\" <= b <= \"z\" if \"A\" <= a <= \"Z\" then \"A\" <= b <= \"A\" if \"0\" <= a <= \"9\" then \"0\" <= b <= \"9\" if 0 <= a <= 9 then 0 <= b <= 9 exclude must be an string or list or tuple of single char string. By default exclude is None Examples ExpressiveRegex () \\ . range ( 'a' , 'f' ) \\ . toRegexString () \"[a-f]\" ExpressiveRegex () \\ . range ( 'a' , 'f' , exclude = 'bd' ) \\ . toRegexString () \"[acef]\" ExpressiveRegex () \\ . range ( 'a' , 'f' , exclude = [ 'b' , 'd' ]) \\ . toRegexString () \"[acef]\"","title":".range(a, b, exclude)"},{"location":"api/literals/#anythingbutrangea-b-exclude","text":"Matches any character, except those that would be captured by the .range . Examples ExpressiveRegex () \\ . anythingButRange ( 'a' , 'f' ) \\ . toRegexString () \"[^a-f]\" ExpressiveRegex () \\ . anythingButRange ( 'a' , 'f' , exclude = 'bd' ) \\ . toRegexString () \"[^acef]\"","title":".anythingButRange(a, b, exclude)"},{"location":"api/literals/#anyofcharschars","text":"Matches any of the characters in the provided string chars and scape special characters. Example ExpressiveRegex () \\ . anyOfChars ( 'abd$' ) \\ . toRegexString () \"[abd\\$]\"","title":".anyOfChars(chars)"},{"location":"api/literals/#anythingbutcharschars","text":"Matches any character, except any of those in the provided string chars and scape special characters. Example ExpressiveRegex () \\ . anythingButChars ( 'abd$' ) \\ . toRegexString () \"[^abd\\$]\"","title":".anythingButChars(chars)"},{"location":"api/quantifiers/","text":"Quantifiers \u00b6 .optional \u00b6 Matches 0 or 1 of the proceeding expression. Example ExpressiveRegex () \\ . optional . digit \\ . toRegexString () \"\\d?\" .zeroOrMore \u00b6 Matches 0 or more repetitions of the proceeding expression. Example ExpressiveRegex () \\ . zeroOrMore . digit \\ . toRegexString () \"\\d*\" .zeroOrMoreLazy \u00b6 Matches 0 or more repetitions of the proceeding expression, but as few times as possible. Example ExpressiveRegex () \\ . zeroOrMoreLazy . digit \\ . toRegexString () \"\\d*\" .oneOrMore \u00b6 Matches 1 or more repetitions of the proceeding expression. Example ExpressiveRegex () \\ . oneOrMore . digit \\ . toRegexString () \"\\d+\" .oneOrMoreLazy \u00b6 Matches 1 or more repetitions of the proceeding expression, but as few times as possible. Example ExpressiveRegex () \\ . oneOrMoreLazy . digit \\ . toRegexString () \"\\d+?\" .exactly(n) \u00b6 Matches exactly n repetitions of the proceeding expression. Example ExpressiveRegex () \\ . exactly ( 4 ) . digit \\ . toRegexString () \"\\d {4} \" .atLeast(n) \u00b6 Matches at least n repetitions of the proceeding expression. If n is 1 then is equivalente to .oneOrMore . If n is 0 then is equivalente to .zeroOrMore . Example ExpressiveRegex () \\ . atLeast ( 4 ) . digit \\ . toRegexString () \"\\d{4,}\" .uoTo(n) \u00b6 Matches up to n repetitions of the proceeding expression. If n is 1 then is equivalente to .optional . Example ExpressiveRegex () \\ . uoTo ( 4 ) . digit \\ . toRegexString () \"\\d{,4}\" .between(n,m) \u00b6 Matches between n and m repetitions of the proceeding expression. If n is 0 and m is 1 then is equivalente to .optional . If n is 0 and m > 1 then is equivalente to .uoTo(m) . Example ExpressiveRegex () \\ . between ( 2 , 4 ) . digit \\ . toRegexString () \"\\d{2,4}\" .betweenLazy(n,m) \u00b6 Matches between n and m repetitions of the proceeding expression, but as few times as possible. Example ExpressiveRegex () \\ . between ( 2 , 4 ) . digit \\ . toRegexString () \"\\d{2,4}?\"","title":"Quantifiers"},{"location":"api/quantifiers/#quantifiers","text":"","title":"Quantifiers"},{"location":"api/quantifiers/#optional","text":"Matches 0 or 1 of the proceeding expression. Example ExpressiveRegex () \\ . optional . digit \\ . toRegexString () \"\\d?\"","title":".optional"},{"location":"api/quantifiers/#zeroormore","text":"Matches 0 or more repetitions of the proceeding expression. Example ExpressiveRegex () \\ . zeroOrMore . digit \\ . toRegexString () \"\\d*\"","title":".zeroOrMore"},{"location":"api/quantifiers/#zeroormorelazy","text":"Matches 0 or more repetitions of the proceeding expression, but as few times as possible. Example ExpressiveRegex () \\ . zeroOrMoreLazy . digit \\ . toRegexString () \"\\d*\"","title":".zeroOrMoreLazy"},{"location":"api/quantifiers/#oneormore","text":"Matches 1 or more repetitions of the proceeding expression. Example ExpressiveRegex () \\ . oneOrMore . digit \\ . toRegexString () \"\\d+\"","title":".oneOrMore"},{"location":"api/quantifiers/#oneormorelazy","text":"Matches 1 or more repetitions of the proceeding expression, but as few times as possible. Example ExpressiveRegex () \\ . oneOrMoreLazy . digit \\ . toRegexString () \"\\d+?\"","title":".oneOrMoreLazy"},{"location":"api/quantifiers/#exactlyn","text":"Matches exactly n repetitions of the proceeding expression. Example ExpressiveRegex () \\ . exactly ( 4 ) . digit \\ . toRegexString () \"\\d {4} \"","title":".exactly(n)"},{"location":"api/quantifiers/#atleastn","text":"Matches at least n repetitions of the proceeding expression. If n is 1 then is equivalente to .oneOrMore . If n is 0 then is equivalente to .zeroOrMore . Example ExpressiveRegex () \\ . atLeast ( 4 ) . digit \\ . toRegexString () \"\\d{4,}\"","title":".atLeast(n)"},{"location":"api/quantifiers/#uoton","text":"Matches up to n repetitions of the proceeding expression. If n is 1 then is equivalente to .optional . Example ExpressiveRegex () \\ . uoTo ( 4 ) . digit \\ . toRegexString () \"\\d{,4}\"","title":".uoTo(n)"},{"location":"api/quantifiers/#betweennm","text":"Matches between n and m repetitions of the proceeding expression. If n is 0 and m is 1 then is equivalente to .optional . If n is 0 and m > 1 then is equivalente to .uoTo(m) . Example ExpressiveRegex () \\ . between ( 2 , 4 ) . digit \\ . toRegexString () \"\\d{2,4}\"","title":".between(n,m)"},{"location":"api/quantifiers/#betweenlazynm","text":"Matches between n and m repetitions of the proceeding expression, but as few times as possible. Example ExpressiveRegex () \\ . between ( 2 , 4 ) . digit \\ . toRegexString () \"\\d{2,4}?\"","title":".betweenLazy(n,m)"}]}